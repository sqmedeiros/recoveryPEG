Mudanças na gramática, usando o algoritmo que não anota uma repetição p*
como (!FOLLOW(p) p / %{Erro}), mas anota p 

O algoritmo que anota produz um melhor resultado assumindo que a escolha é associativa à esquerda.
TODO: verificar e mostrar exemplos.

program         <-  Ok

toplevelfunc    <-  Ok

toplevelvar     <-  Erro. Adicionou os mesmos labels da gramática original, mas sem o predicado !(IMPORT / FOREIGN) a anotação de 'exp' pode reportar erro quando a entrada seria um 'import' ou 'foreign' válido
                   
toplevelrecord  <-  Ok

localopt        <-  Ok 

import          <-  Erro. Adicionou os mesmos labels da gramática original, mas sem o predicado !FOREIGN a anotação de 'IMPORT' pode reportar erro quando a entrada seria um 'foreign' válido. Diferença: o algoritmo anota a escolha, enquanto a anotação manual anotou a segunda alternativa da escolha.

foreign         <-  Ok. Diferença: o algoritmo anota a escolha, enquanto a anotação manual anotou a segunda alternativa da escolha.

rettypeopt      <-  Ok 

paramlist       <-  Ok

param           <-  Ok

decl            <-  Ok

decllist        <-  Ok

simpletype      <-  Ok

typelist        <-  Ok

rettype         <-  Falta anotação. Não anotou 'rettype' pois as alternativas da escolha ordenada não são LL(1).

type            <-  Falta anotação e com anotação extra. Não anotou 'rettype' na segunda alternativa, pois a escolha entre a segunda e a terceira alternativas não é LL(1). Anotou o 'RARROW' na primeira alternativa, anotação que não consta na gramática original.

recordfields    <-  Ok

recordfield     <-  Ok

block           <-  Ok

statement       <-  Falta anotação. Não anotou '=' e 'explist' na penúltima alternativa pois porque há conflito LL(1) com a última alternativa, que começa com 'suffixedexp'.

elseifstats     <-  Ok

elseifstat      <-  Ok

elseopt         <-  Ok

returnstat      <-  Ok

op1 .. op12     <-  Usei o operador direto em e1 .. e12

exp             <-  Ok

e1 .. e12       <-  Ok

suffixedexp     <-  Ok

expsuffix       <-  Ok

prefixexp       <-  Ok

castexp         <-  Falta anotação. Não anotou 'type' na primeira alternativa, pois há conflito LL(1) com a segunda alternitva.

simpleexp       <-  Ok

var             <-  Ok

varlist         <-  Ok

funcargs        <-  Ok

explist         <-  Ok

initlist        <-  Ok

fieldlist       <-  Falta anotação. A gramática original usa um predicado !RCURLY para decidir se lança ou não o label ExpFieldList

field           <-  Ok

fieldsep        <-  Ok



















